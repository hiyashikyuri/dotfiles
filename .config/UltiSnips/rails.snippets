# controller系
snippet class "create a class"
class ${1:Model}sController < ${2:ClassToExtends}
end
endsnippet

snippet bc "before action"
before_action :${1:NameOfMethod}
endsnippet

snippet bcc "before action with targets"
before_action :${1:NameOfMethod}, only: %i[${2:Resources}]
endsnippet

snippet index "create a index method"
def index
	@$1s = ${1/.*/\u$0/}.all
end
endsnippet

snippet new "create a new method"
def new
	@$1 = ${1/.*/\u$0/}.new
end
endsnippet

snippet show "create a show method"
def show; end
endsnippet

snippet edit "create a edit method"
def edit; end
endsnippet

snippet create "create a create method"
def create
	@$1 = ${1/.*/\u$0/}.new(${2:Parameters})
	if @$1.save
		redirect_to $1_path(@$1)
	else
		render :new
	end
end
endsnippet

snippet update "create a update method"
def update
	if @$1.update(${2:Parameters})
		redirect_to $1_path(@$1)
	else
		render :edit
	end
end
endsnippet

snippet destroy "create a destroy method"
def destroy
	@${1:Resource}.destroy
	redirect_to $1s_path
end
endsnippet

snippet set "find a resource"
def set_$1
	@$1 = ${1/.*/\u$0/}.find(params[:id])
end
endsnippet

snippet pc "params create"
def params_create
	params.require(:${1:NameOfRecource}).permit(:${2:Parameters})
end
endsnippet

# Rspec系
snippet it "rspec it"
it '${1:Description}' do
end
endsnippet

snippet con "rspec context"
context '${1:Description}' do
end
endsnippet

snippet desc "rspec describe"
describe '${1:Description}' do
end
endsnippet

snippet rsindex "create index rspec"
describe 'GET /index' do
	context 'with valid right' do
		it 'returns http success' do
			get ${1:Resource}s_path
			expect(response).to have_http_status(:ok)
		end
	end

	context 'with invalid right' do
		it 'redirects to root path when role is read' do
			get $1s_path
			expect(response).to have_http_status(:found)
		end
	end
end
endsnippet

snippet rsshow "create show rspec"
describe 'GET /show' do
	context 'with valid right' do
		it 'returns http success' do
			get ${1:Resource}_path($1.id)
			expect(response).to have_http_status(:ok)
		end
	end

	context 'with invalid right' do
		it 'redirects to root path' do
			get $1_path($1.id)
			expect(response).to have_http_status(:found)
		end
	end
end
endsnippet

snippet rsnew "create new rspec"
describe 'GET /new' do
	context 'with valid right' do
		it 'returns http success' do
			get new_${1:Resource}_path
			expect(response).to have_http_status(:ok)
		end
	end

	context 'with invalid right' do
		it 'redirects to root path' do
			get new_$1_path
			expect(response).to have_http_status(:found)
		end
	end
end
endsnippet

snippet rsedit "create edit rspec"
describe 'GET /edit' do
	context 'with valid right' do
		it 'returns http success' do
			get edit_${1:Resource}_path($1.id)
			expect(response).to have_http_status(:ok)
		end
	end

	context 'with invalid right' do
		it 'redirects to root path' do
			get edit_$1_path($1.id)
			expect(response).to have_http_status(:found)
		end
	end
end
endsnippet

snippet rscreate "create ceate rspec"
describe 'POST /create' do
	let(:attrs) { attributes_for(:$1) }

	context 'when valid parameters' do
		it 'returns 302 status after created' do
			post $1s_path, params: { $1: attrs }
			expect(response).to have_http_status(:found)
			expect(response).to redirect_to $1_path(${1/.*/\u$0/}.last.id)
		end

		it 'can create user_company and increase one record' do
			expect {
				post $1s_path, params: { $1: attrs }
			}.to change(${1/.*/\u$0/}, :count).by(+1)
		end
	end

	context 'when invalid parameters' do
	end
end
endsnippet

snippet rsupdate "create update rspec"
describe 'PUT /update' do
	context 'when valid parameters' do
		it 'returns 302 status' do
			put ${1:Resource}_path($1.id), params: { $1: { ${2:PropKey}: ${3:PropVal} } }
			expect(response).to have_http_status(:found)
		end

		it 'updates $2' do
			expect {
				put $1_path($1.id), params: { $1: { $2: $3 } }
			}.to change { ${1/.*/\u$0/}.find($1.id).$2 }.from($1.$2).to($3)
		end
	end

	context 'with invalid right' do
		it 'redirects to root path when role is read' do
			put $1_path($1.id), params: { $1: { $2: $3 } }
			expect(response).to have_http_status(:found)
			expect(response).to redirect_to root_path
		end
	end
end
endsnippet

snippet rsdestroy "create destroy rspec"
describe 'DELETE /destroy' do
	context 'success' do
		it 'reduce one record' do
			expect { delete ${1:Resource}_path($1.id) }.to change(${1/.*/\u$0/}, :count).by(-1)
		end

		it 'redirects to $1 path' do
			delete $1_path($1.id)
			expect(response).to redirect_to $1s_path
		end
	end
end
endsnippet

