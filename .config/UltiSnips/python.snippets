snippet for "for loop"
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
endsnippet


global !p
def get_args(line: str):
  args = []
  for arg in map(lambda x: x.lstrip(), line.split(',')):
    temp = arg.split(':')
    attr, anno = (temp[0], temp[1].lstrip()) if len(temp) > 1 else (temp[0], None)
    args.append((attr, anno))
  return args
endglobal

snippet class
class ${1:ClassName}:

	def __init__(self, ${3:args}):`!p
snip >> 2
for arg in get_args(t[3]):
  snip += f"self.{arg[0]} = {arg[0]}"`$0
endsnippet


snippet if "If"
if ${1:condition}:
	${2:${VISUAL:pass}}
endsnippet

snippet ife "If / Else"
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${3:pass}
endsnippet

snippet ifee "If / Elif / Else"
if ${1:condition}:
	${2:${VISUAL:pass}}
elif ${3:condition}:
	${4:pass}
else:
	${5:pass}
endsnippet


##########################
# Try / Except / Finally #
##########################
snippet try "Try / Except"
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

snippet trye "Try / Except / Else"
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet tryf "Try / Except / Finally"
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet tryef "Try / Except / Else / Finally"
try:
	${1:${VISUAL:pass}}
except${2: ${3:Exception} as ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet

######################
# Assertions & Tests #
######################

snippet ae "Assert equal"
assert ${1:first} == ${2:second}
endsnippet

