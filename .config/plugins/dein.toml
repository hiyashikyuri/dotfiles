# NeoVimのプラグインマネージャー。これないとやばい
[[plugins]]
repo = 'Shougo/dein.vim'

# Lint エンジン。サイドバーの矢印とコメントでチェックしてくれる
[[plugins]]
repo = 'w0rp/ale'

# TODO(okubo): dduに切り替えたいが、LSP接続が難しいので一旦断念
# ##### 自動補完
[[plugins]]
repo = 'vim-denops/denops.vim'
#
#
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
  call ddc#custom#patch_global('sources', ['nvim-lsp', 'around'])
  call ddc#custom#patch_global('sourceOptions', {
        \ '_': {
        \   'minAutoCompleteLength': 1 },
        \ 'nvim-lsp': {
        \   'mark': 'LSP',
        \   'matchers': ['matcher_head'],
        \   'forceCompletionPattern': '\.\w*|:\w*|->\w*' },
        \ 'around': {
        \   'mark': 'A' },
        \ })
  call ddc#custom#patch_global('sourceParams', {
        \ 'nvim-lsp': { 'kindLabels': { 'Class': 'c' } },
        \ })

inoremap <silent><expr> <TAB>
\ ddc#map#pum_visible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

  call ddc#enable()

'''

  # inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
  # inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>



# nvim lsp configとの連携
[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'
# 近くにあるwordを拾ってくれる
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'
# 入力中の単語補完
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'

# 補完の詳細なソースのpopupが表示される
[[plugins]]
 repo = 'matsui54/denops-popup-preview.vim'
 on_source = 'ddc.vim'
 hook_source = '''
 call popup_preview#enable()
'''
# 入力時にhelpが出る
[[plugins]]
 repo = 'matsui54/denops-signature_help'
 on_source = 'ddc.vim'
 hook_source = '''
 call signature_help#enable()
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source= '''
lua << EOF
local nvim_lsp = require('lspconfig')
local protocol = require'vim.lsp.protocol'

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  -- buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  -- buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  --buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)

end

nvim_lsp.tsserver.setup {
  on_attach = on_attach,
  filetypes = {"javascript", "javascriptreact", "javascript.jsx", "typescript", "typescriptreact", "typescript.tsx"};
}
EOF
'''
#
# # lspのinstallを楽にしてくれる
# [[plugins]]
# repo = 'williamboman/nvim-lsp-installer'
# on_source = 'nvim-lspconfig'
#
# # Hover, definition, etc..
[[plugins]]
repo = 'glepnir/lspsaga.nvim'
hook_add = '''
lua << EOF
local saga = require('lspsaga')
saga.init_lsp_saga()
EOF

nnoremap <silent> <C-j> <Cmd>Lspsaga diagnostic_jump_next<CR>
nnoremap <silent>K <Cmd>Lspsaga hover_doc<CR>
"nnoremap <silent> K <Cmd>lua require('lspsaga.hover').render_hover_doc()<CR>
inoremap <silent> <C-k> <Cmd>Lspsaga signature_help<CR>
nnoremap <silent> gd <Cmd>Lspsaga lsp_finder<CR>
nnoremap <silent> gp <Cmd>Lspsaga preview_definition<CR>
nnoremap <silent> gr <Cmd>Lspsaga rename<CR>
'''

# [[plugins]]
# repo = 'hrsh7th/nbim-compe'
# hook_add = '''
# lua << EOF
#   require'compe'.setup {
#     enabled = true;
#     autocomplete = true;
#     debug = false;
#     min_length = 1;
#     preselect = 'enable';
#     throttle_time = 80;
#     source_timeout = 200;
#     resolve_timeout = 800;
#     incomplete_delay = 400;
#     max_abbr_width = 100;
#     max_kind_width = 100;
#     max_menu_width = 100;
#     documentation = {
#       border = { '', '' ,'', ' ', '', '', '', ' ' }, -- the border option is the same as `|help nvim_open_win|`
#       winhighlight = "NormalFloat:CompeDocumentation,FloatBorder:CompeDocumentationBorder",
#       max_width = 120,
#       min_width = 60,
#       max_height = math.floor(vim.o.lines * 0.3),
#       min_height = 1,
#     };
#
#     source = {
#       path = true;
#       buffer = true;
#       calc = true;
#       nvim_lsp = true;
#       nvim_lua = true;
#       vsnip = true;
#       ultisnips = true;
#       luasnip = true;
#     };
#   }
# EOF
# inoremap <silent><expr> <C-Space> compe#complete()
# inoremap <silent><expr> <CR>      compe#confirm('<CR>')
# inoremap <silent><expr> <C-e>     compe#close('<C-e>')
# inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
# inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })
# '''


# syntax highter
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_add = '''
lua << EOF
require 'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    disable = {},
  },
  indent = {
    enable = false,
    disable = {},
  },
  ensure_installed = {
    "tsx",
    "toml",
    "json",
    "yaml",
    "swift",
    "kotlin",
    "dart",
    "ruby",
    "html",
    "css",
    "scss"
  }
}
EOF
'''

# LSP. COC便利なので利用
# [[plugins]]
# repo = 'neoclide/coc.nvim'
# rev = 'release'
# build = '''
#   git checkout release
# '''
# hook_add = '''
#   inoremap <silent><expr> <TAB>
#         \ pumvisible() ? coc#_select_confirm() :
#         \ <SID>check_back_space() ? "\<TAB>" :
#         \ coc#refresh()
#   inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
#   inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
#   function! s:check_back_space() abort
#     let col = col('.') - 1
#     return !col || getline('.')[col - 1]  =~# '\s'
#   endfunction
#   nmap <silent> gd <Plug>(coc-definition)
#   nmap <silent> gy <Plug>(coc-type-definition)
#   nmap <silent> gi <Plug>(coc-implementation)
#   nmap <silent> gr <Plug>(coc-references)
#
#   nnoremap <silent> K :call <SID>show_documentation()<CR>
#   function! s:show_documentation()
#     if (index(['vim','help'], &filetype) >= 0)
#       execute 'h '.expand('<cword>')
#     elseif (coc#rpc#ready())
#       call CocActionAsync('doHover')
#     else
#       execute '!' . &keywordprg . " " . expand('<cword>')
#     endif
#   endfunction
#
#   let g:coc_global_extensions = [
#   \ 'coc-solargraph',
#   \ 'coc-flutter',
#   \ 'coc-tsserver',
#   \ 'coc-prettier',
#   \ 'coc-eslint',
#   \ 'coc-git',
#   \ 'coc-markdownlint',
#   \ 'coc-pairs',
#   \ 'coc-prettier',
#   \ 'coc-yaml',
#   \ 'coc-java',
#   \ 'coc-css',
#   \ 'coc-html',
#   \ 'coc-sql',
#   \ 'coc-pyright',
#   \ 'coc-go',
#   \ 'coc-json',
#   \ 'coc-sourcekit'
#   \ ]
# '''

[[plugins]]
repo = 'nvim-lua/popup.nvim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'


[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
depends = ['plenary.nvim', 'telescope-media-files.nvim']
hook_add = '''
lua << EOF
local actions= require('telescope.actions')
require('telescope').setup {
  defaults = {
    mappings = {
      n= {
        ["q"] = actions.close
      }
    }
  }
}

EOF
  nnoremap ff <cmd>Telescope find_files hidden=true<cr>
  nnoremap fg <cmd>Telescope live_grep<cr>
  nnoremap fb <cmd>Telescope buffers<cr>
  nnoremap fh <cmd>Telescope help_tags<cr>
'''



# nnoremap ff <cmd>Telescope find_files<cr>



# ファイル検索。regexからファイル名までいけるので必須
# [[plugins]]
# repo = 'junegunn/fzf'
# hook_post_update = './install --all'
# merged = 0

# [[plugins]]
# repo = 'junegunn/fzf.vim'
# depends = 'fzf'
# hook_add = '''
#   nnoremap fb :Buffers<CR>
#   nnoremap fg :Rg<CR>
#   nnoremap ff :Files<CR>
#   nnoremap fc :Commits<CR>
#
#   let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }
#   let $FZF_DEFAULT_OPTS="--ansi --preview-window 'right:60%' --layout reverse --margin=1,4 --preview 'bat --color=always --style=header,grid --line-range :300 {}'"
#   set rtp+=/usr/local/opt/fzf
# '''

# telescopeで表示するアイコン
[[plugins]]
repo ="kyazdani42/nvim-web-devicons"


[[plugins]]
repo ="kristijanhusak/defx-git"
hook_add = '''
call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : '✹',
  \ 'Staged'    : '✚',
  \ 'Untracked' : '✭',
  \ 'Renamed'   : '➜',
  \ 'Unmerged'  : '═',
  \ 'Ignored'   : '☒',
  \ 'Deleted'   : '✖',
  \ 'Unknown'   : '?'
  \ })
'''

# [[plugins]]
# repo ="kristijanhusak/defx-icons"

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
hook_add = '''
call defx#custom#column('icon', {
      \ 'directory_icon': '▸',
      \ 'opened_icon': '▾',
      \ 'root_icon': ' ',
      \ })
call defx#custom#column('filename', {
      \ 'min_width': 40,
      \ 'max_width': 40,
      \ })
call defx#custom#column('mark', {
      \ 'readonly_icon': '✗',
      \ 'selected_icon': '✓',
      \ })
call defx#custom#option('_', {
      \ 'columns': 'indent:git:icons:filename',
      \ 'show_ignored_files': 1,
      \ 'toggle': 1,
      \ 'buffer_name': 'exlorer',
      \ })
nnoremap <C-e> :<C-u>Defx -new `expand('%:p:h')` -search=`expand('%:p')`<CR>
autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
    nnoremap <silent><buffer><expr> c defx#do_action('copy')
    nnoremap <silent><buffer><expr> m defx#do_action('move')
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> l defx#do_action('open')
    nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d defx#do_action('remove')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
    nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
  endfunction
'''

# iconのパッケージ
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# 作業中のブランチやファイル名、を画面の下部と上部に表示
[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = 'vim-airline'
hook_add = '''
    let g:airline_theme = 'papercolor'
    let g:airline#extensions#hunks#enabled = 0
    let g:airline#extensions#branch#enabled = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
'''

# 差分を左に-と+で教えてくれる
[[plugins]]
repo = "airblade/vim-gitgutter"

# Gitに関するコマンドを使うことが可能。超便利
[[plugins]]
repo = "tpope/vim-fugitive"

# 複数行のコメントいける
[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
    vnoremap ? :'<,'>TComment<CR>
'''

# 括弧に色をつけてわかりやすくしてくれる。だいじ
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active = 1
'''

[[plugins]]
repo = 'NLKNguyen/papercolor-theme'

# 簡単に括弧やクオテーションで囲める。超重要
[[plugins]]
repo = 'tpope/vim-surround'

# カッコやクオテーションの自動追加
[[plugins]]
repo = 'jiangmiao/auto-pairs'

# コード整形。使える言語限られているので、利用のタイミングは割と限定的
[[plugins]]
repo  = 'prettier/vim-prettier'
build = 'npm install'

# インデントを見やすくする
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

# snippets
[[plugins]]
repo ='SirVer/ultisnips'
hook_add = '''
   let g:UltiSnipsSnippetDirectories=[$HOME.'/.config/UltiSnips']
   let g:UltiSnipsExpandTrigger       = '<c-k>'
   let g:UltiSnipsJumpForwardTrigger="<c-b>"
   let g:UltiSnipsJumpBackwardTrigger="<c-z>"
 '''

# 特定keywordで画面移動を素早く実行
[[plugins]]
repo ='easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  nmap qq <Plug>(easymotion-overwin-f)
  nmap qq <Plug>(easymotion-overwin-f2)
  let g:EasyMotion_smartcase = 1
  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)
 '''

# whitespace検出
[[plugins]]
repo='ntpeters/vim-better-whitespace'

# vim-testの画面を画面下部に出力させるために導入
[[plugins]]
repo = 'tpope/vim-dispatch'
hook_add = '''
let g:dispatch_quickfix_height=30
'''
# test実行を簡単にする
[[plugins]]
repo = 'vim-test/vim-test'
depends = ['vim-dispatch']
hook_add = '''
let g:test#strategy = 'dispatch'
'''

# ターミナル起動
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
	let g:neoterm_autoinsert = 1
	let g:neoterm_autoscroll = 1
	" # let g:neoterm_split_on_tnew = 1
	let g:neoterm_default_mod = "belowright"

  nmap <C-t> :Ttoggle<CR>
  '''
# function等をリストして右側に出してくれる。ファイルの中の関数全部一気に見れるので非常に便利
[[plugins]]
repo = 'liuchengxu/vista.vim'
depends = ['coc.nvim', 'lightline.vim']

# windowのサイズをtmuxのpaneみたいに変更可能
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<C-s>'
'''

[[plugins]]
repo = 'iberianpig/tig-explorer.vim'

# vim でshell起動。主にdlvのUIを整えるため、が目的
[[plugins]]
repo = 'Shougo/vimshell.vim'
