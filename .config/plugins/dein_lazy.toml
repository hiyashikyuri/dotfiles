## for language syntax or utils
# for rails
# :Rails + etc commands
[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby', 'haml', 'slim', 'erb']

# insert end automaticaly in ruby file
# [[plugins]]
# repo = 'tpope/vim-endwise'
# on_ft = ['ruby']

# haml syntax
[[plugins]]
repo = 'tpope/vim-haml'
on_ft = ['ruby', 'haml']

# slim syntax
[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = ['slim']

[[plugins]]
repo = 'chrisbra/csv.vim'
on_ft = ['csv']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_add = '''
  let g:rustfmt_autosave = 1
'''


# [[plugins]]
# repo = 'pangloss/vim-javascript',
# on_ft = ['javascript', 'javascript.jsx']

# [[plugins]]
# repo = 'maxmellon/vim-jsx-pretty'
# on_ft = ['javascript', 'javascript.jsx']
#
# [[plugins]]
# repo = 'leafgarland/typescript-vim'
# on_ft = ['typescript', 'typescript.tsx']

# dart file
[[plugins]]
repo = 'dart-lang/dart-vim-plugin'
on_ft = ['dart']
hook_add = '''
  let g:dart_format_on_save = 1
'''

[[plugins]]
repo = 'zah/nim.vim'
on_ft = ['nim']


# [[plugins]]
# repo = 'thosakwe/vim-flutter'
# on_ft = ['dart']
# hook_source = '''
#   let g:flutter_hot_reload_on_save = 1
#   let g:flutter_command = 'fvm'
# '''

# run flutter on vim through fvm
[[plugins]]
repo = 'akinsho/flutter-tools.nvim'
on_ft = ['dart']
hook_source = '''
lua << EOF
require('flutter-tools').setup{
  fvm = true,
   widget_guides = {
    enabled = true,
  },
} -- use defaults
EOF
'''

# debugger for go
[[plugins]]
repo = 'sebdah/vim-delve'
on_ft = ['go']
hook_source = '''
  nmap <silent> dl :DlvToggleBreakpoint<CR>
  nmap <silent> dt :DlvTest<CR>

'''
# [[plugins]]
# repo = 'udalov/kotlin-vim'
# on_ft = ['kotlin']

# syntax highlight
# [[plugins]]
# repo = 'keith/swift.vim'
# on_ft = ['swift']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']

# jsonファイルにコメント入れるために追加
[[plugins]]
repo = 'neoclide/jsonc.vim'
on_ft = ['json', 'jsonc']

# indentation and syntax for graphql
[[plugins]]
repo = 'jparise/vim-graphql'
on_ft = ['graphql', 'graphqls']

# formatter
[[plugins]]
repo     = 'prettier/vim-prettier'
build    = 'npm install'
on_ft    = ['javascript', 'typescript', 'ruby', 'python', 'css', 'scss', 'json', 'markdown']
hook_source = '''
  " @formatアノテーションを持ったファイルの自動フォーマットを無効にする
  let g:prettier#autoformat = 1
  let g:prettier#quickfix_enabled = 0
  let g:prettier#autoformat_require_pragma = 0
  let g:prettier#autoformat_config_present = 0

  " autocmd BufWritePre *.js,*.ts,*.rb,*.py,*.css,*.scss,*.json,*.md PrettierAsync
  autocmd BufWritePre *.rb,*.py,*.css,*.scss,*.json,*.md PrettierAsync
'''

# pythonの括弧のインデントがおかしい問題を解消してくれる
[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python']

# importだけ保存時にやってくれる
[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = ['go']

##### LSP section start
# lsp config. lazy出ないと正常に読み込まれない
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
on_ft = [
  'javascript', 'typescript', 'typescript.tsx', 'dart', 'go', 'html', 'css', 'scss',
  'nim', 'toml', 'ruby', 'elm'
]
hook_source= '''
lua << EOF
local nvim_lsp = require('lspconfig')
local protocol = require'vim.lsp.protocol'

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  -- buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  -- buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  -- buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  -- buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)

end

 local lsp_installer = require('nvim-lsp-installer')
 lsp_installer.on_server_ready(function(server)
   local opts = {}
   opts.on_attach = on_attach
   server:setup(opts)
   vim.cmd [[ do User LspAttachBuffers ]]
 end)

  nvim_lsp.solargraph.setup{
    settings = {
      solargraph = {
        commandPath = '/Users/masahirookubo/.rbenv/shims/solargraph',
        diagnostics = true,
        completion = true
      }
    },
    on_attach = on_attach
  }
EOF
'''

# さまざまなlspを簡単にinstallできる
[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'

# beautiful ui for nvim lsp
[[plugins]]
repo = 'glepnir/lspsaga.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
  local saga = require('lspsaga')
  saga.init_lsp_saga({
    finder_icons = {
      def = '  ',
      ref = '諭 ',
      link = '  ',
    },
  })
EOF

nnoremap <silent> <C-j> <Cmd>Lspsaga diagnostic_jump_next<CR>
nnoremap <silent>K <Cmd>Lspsaga hover_doc<CR>
"nnoremap <silent> K <Cmd>lua require('lspsaga.hover').render_hover_doc()<CR>
inoremap <silent> <C-k> <Cmd>Lspsaga signature_help<CR>
nnoremap <silent> gd <Cmd>Lspsaga lsp_finder<CR>
nnoremap <silent> gp <Cmd>Lspsaga preview_definition<CR>
nnoremap <silent> gr <Cmd>Lspsaga rename<CR>
'''
##### LSP section end

##### Completion section start
# vscode like pictograms
[[plugins]]
repo = 'onsails/lspkind-nvim'
hook_source = '''
lua << EOF
require('lspkind').init({
    -- DEPRECATED (use mode instead): enables text annotations
    --
    -- default: true
    -- with_text = true,

    -- defines how annotations are shown
    -- default: symbol
    -- options: 'text', 'text_symbol', 'symbol_text', 'symbol'
    mode = 'symbol_text',

    -- default symbol map
    -- can be either 'default' (requires nerd-fonts font) or
    -- 'codicons' for codicon preset (requires vscode-codicons font)
    --
    -- default: 'default'
    preset = 'codicons',

    -- override preset symbols
    --
    -- default: {}
    symbol_map = {
      Text = "",
      Method = "",
      Function = "",
      Constructor = "",
      Field = "ﰠ",
      Variable = "",
      Class = "ﴯ",
      Interface = "",
      Module = "",
      Property = "ﰠ",
      Unit = "塞",
      Value = "",
      Enum = "",
      Keyword = "",
      Snippet = "",
      Color = "",
      File = "",
      Reference = "",
      Folder = "",
      EnumMember = "",
      Constant = "",
      Struct = "פּ",
      Event = "",
      Operator = "",
      TypeParameter = ""
    },
})
EOF
'''

# # nvim cmp source for buffer words
[[plugins]]
repo = 'hrsh7th/cmp-buffer'
on_source = 'nvim-lspconfig'

# nvim-cmp source for neovim's built in LSP
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
on_source = 'nvim-lspconfig'

# signature helpを入力時に表示
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp-signature-help'
on_source = 'nvim-lspconfig'

# nvim-cmpで必須
[[plugins]]
repo = 'quangnguyen30192/cmp-nvim-ultisnips'
on_source = 'nvim-lspconfig'

# # completion
[[plugins]]
repo = 'hrsh7th/nvim-cmp'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
local cmp = require'cmp'
cmp.setup({
  snippet = {
    -- REQUIRED - you must specify a snippet engine
    expand = function(args)
      -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
      -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
      -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
      vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
    end,
  },
  mapping = cmp.mapping.preset.insert({
    ['<C-b>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.abort(),
    ['<CR>'] = cmp.mapping.confirm({
      behavior = cmp.ConfirmBehavior.Replate,
      select = true
    }),
    ['<Tab>'] = cmp.mapping.select_next_item({behavior=cmp.SelectBehavior.Insert}),
    ['<S-Tab>'] = cmp.mapping.select_prev_item({behavior=cmp.SelectBehavior.Insert}),
  }),
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'ultisnips' },
    { name = 'buffer' },
    { name = 'nvim_lsp_signature_help' }
  })
})
EOF

set completeopt=menuone,noinsert,noselect
highlight! default link CmpItemKind CmpItemMenuDefault
'''
##### Completion section end

##### Buffer section start
[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'tokyonight',
    section_separators = { left = '', right = '' },
    component_separators = { left = '', right = '' },
    disabled_filetypes = {}
  },
  sections = {
    lualine_a = { 'mode' },
    lualine_b = { 'branch' },
    lualine_c = { {
      'filename',
      file_status = true, -- displays file status (readonly status, modified status)
      path = 1 -- 0 = just filename, 1 = relative path, 2 = absolute path
    } },
    lualine_x = {
      { 'diagnostics', sources = { "nvim_diagnostic" }, symbols = { error = ' ', warn = ' ', info = ' ',
        hint = ' ' } },
      'encoding',
      'filetype'
    },
    lualine_y = { 'progress' },
    lualine_z = { 'location' }
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = { {
      'filename',
      file_status = true, -- displays file status (readonly status, modified status)
      path = 1 -- 0 = just filename, 1 = relative path, 2 = absolute path
    } },
    lualine_x = { 'location' },
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  extensions = { 'fugitive' }
}
EOF
'''

# 右下にlspのloading状態を最初に表示してくれる
[[plugins]]
repo = 'j-hui/fidget.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
  require('fidget').setup{}
EOF
'''

[[plugins]]
repo = 'akinsho/bufferline.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
set termguicolors
lua << EOF
require('bufferline').setup {
  options = {
    mode = "buffers",
    numbers = 'buffer_id',
    indicator_icon = '▎',
    modified_icon = '●',
    left_trunc_marker = '',
    right_trunc_marker = '',
    diagnostics = "nvim_lsp",
    show_buffer_icons = true,
    show_close_icon = true,
    show_tab_indicators = true,
    separator_style = "slant",
    always_show_bufferline = true
  },
  highlights = {
    separator = {
      guifg = '#073642',
      guibg = '#002b36',
    },
    separator_selected = {
      guifg = '#073642',
    },
    background = {
      guifg = '#657b83',
      guibg = '#002b36'
    },
    buffer_selected = {
      guifg = '#fdf6e3',
      gui = "bold",
    },
    fill = {
      guibg = '#073642'
    }
  },
}
EOF
'''
##### Buffer section end
