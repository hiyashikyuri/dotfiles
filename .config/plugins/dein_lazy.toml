## for language syntax or utils
# for rails
# :Rails + etc commands
[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby', 'haml', 'slim', 'erb']

# insert end automaticaly in ruby file
[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = ['ruby']

# haml syntax
[[plugins]]
repo = 'tpope/vim-haml'
on_ft = ['ruby', 'haml']

# slim syntax
[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = ['slim']

# [[plugins]]
# repo = 'pangloss/vim-javascript',
# on_ft = ['javascript', 'javascript.jsx']

# [[plugins]]
# repo = 'maxmellon/vim-jsx-pretty'
# on_ft = ['javascript', 'javascript.jsx']
#
# [[plugins]]
# repo = 'leafgarland/typescript-vim'
# on_ft = ['typescript', 'typescript.tsx']

# dart file
[[plugins]]
repo = 'dart-lang/dart-vim-plugin'
on_ft = ['dart']
hook_add = '''
  let g:dart_format_on_save = 1
'''

# [[plugins]]
# repo = 'thosakwe/vim-flutter'
# on_ft = ['dart']
# hook_source = '''
#   let g:flutter_hot_reload_on_save = 1
#   let g:flutter_command = 'fvm'
# '''

# run flutter on vim through fvm
[[plugins]]
repo = 'akinsho/flutter-tools.nvim'
on_ft = ['dart']
hook_source = '''
lua << EOF
require('flutter-tools').setup{
  fvm = true,
   widget_guides = {
    enabled = true,
  },
} -- use defaults
EOF
'''

# debugger for go
[[plugins]]
repo = 'sebdah/vim-delve'
on_ft = ['go']
hook_source = '''
  nmap <silent> dl :DlvToggleBreakpoint<CR>
  nmap <silent> dt :DlvTest<CR>

'''
# [[plugins]]
# repo = 'udalov/kotlin-vim'
# on_ft = ['kotlin']

# syntax highlight
# [[plugins]]
# repo = 'keith/swift.vim'
# on_ft = ['swift']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']

# jsonファイルにコメント入れるために追加
[[plugins]]
repo = 'neoclide/jsonc.vim'
on_ft = ['json', 'jsonc']

# indentation and syntax for graphql
[[plugins]]
repo = 'jparise/vim-graphql'
on_ft = ['graphql', 'graphqls']

# formatter
[[plugins]]
repo     = 'prettier/vim-prettier'
build    = 'npm install'
on_ft    = ['javascript', 'typescript', 'ruby', 'python', 'css', 'scss', 'json', 'markdown']
hook_source = '''
  " @formatアノテーションを持ったファイルの自動フォーマットを無効にする
  let g:prettier#autoformat = 0

  " Prettierのパースエラーをquickfixに表示しない
  let g:prettier#quickfix_enabled = 0

  autocmd BufWritePre *.js,*.ts,*.rb,*.py,*.css,*.scss,*.json,*.md PrettierAsync
'''

# pythonの括弧のインデントがおかしい問題を解消してくれる
[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python']

# importだけ保存時にやってくれる
[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = ['go']

# lsp config. lazy出ないと正常に読み込まれない
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
on_ft = [
  'typescript', 'typescript.tsx', 'dart', 'go', 'html', 'css', 'scss'
]
hook_source= '''
lua << EOF
local nvim_lsp = require('lspconfig')
local protocol = require'vim.lsp.protocol'

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  -- buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  -- buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  -- buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  -- buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)

end

 local lsp_installer = require('nvim-lsp-installer')
 lsp_installer.on_server_ready(function(server)
   local opts = {}
   opts.on_attach = on_attach
   server:setup(opts)
   vim.cmd [[ do User LspAttachBuffers ]]
 end)
EOF
'''

# さまざまなlspを簡単にinstallできる
[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'
